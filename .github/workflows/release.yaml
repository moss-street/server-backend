name: Rust Release

on:
  push:
    branches:
      - main

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
        - target: x86_64-unknown-linux-gnu
          os: ubuntu-latest
        - target: x86_64-apple-darwin
          os: macos-latest
        - target: aarch64-apple-darwin
          os: macos-latest
            
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
      
    - name: Install Protobuf compiler (Linux)
      if: runner.os == 'Linux'
      run: sudo apt-get install -y protobuf-compiler
    - name: Install Protobuf compiler (MacOS)
      if: runner.os == 'macOS'
      run: brew install protobuf
    - name: Install Protobuf compiler (Windows)
      if: runner.os == 'Windows'
      run: choco install protoc
      
    - name: Build
      run: cargo build --release --target ${{ matrix.target }}
      
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: binary-${{ matrix.target }}
        path: target/${{ matrix.target }}/release/backend
    
  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Get latest release tag
      id: get_version
      run: |
        latest_tag=$(git tag --sort=-v:refname | head -n 1)
        if [[ -z "$latest_tag" || ! "$latest_tag" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          latest_tag="0.0.0"
        fi
        IFS='.' read -r major minor patch <<< "$latest_tag"
        new_tag="$major.$minor.$((patch+1))"
        echo "new_version=$new_tag" >> $GITHUB_ENV
      
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Package binaries into zip files
      run: |
        mkdir -p release
        for binary in artifacts/*/*; do
          target_name=$(basename $(dirname "$binary"))
          zip -j "release/${target_name}.zip" "$binary"
        done
          
    - name: Create release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ env.new_version }}
        files: release/*
        body: "Automated release ${{ env.new_version }}"
        draft: false
        prerelease: false

